#!/usr/bin/env bash
# see below for LICENCE information, it can differ for this files or it's fragments.

set -o errexit
set -o nounset

function fail() {
	echo -e "\nERROR (in $0): " "$@"
	exit 1
}

OUTDIR="$1"
export OUTDIR

readonly GALAXY_DIR="/home/ubuntu/build/galaxy42/"
readonly BUILD_DIR="/home/ubuntu/build/" # where deps are built

# build osx cross toolchain
pushd "${GALAXY_DIR}"
	source ./contrib/macdeploy/build-cross-toolchain.sh
	printf "sourced PATH = $PATH\n"
popd

readonly REFERENCE_DATETIME="2016-08-01 00:00:00"

export FAKETIME="$REFERENCE_DATETIME"
# variable from above yml config
echo -e "\nStarted $0 with: FAKETIME=${FAKETIME} OUTDIR=$OUTDIR in PWD=$PWD\n"
# debug

### <LICENCE> - start of licence block - this code if possibly on other licence:
### taken from https://raw.githubusercontent.com/bitcoin/bitcoin/2c2d471e18f0601c2767cf516425b2ecfcfd2126/contrib/gitian-descriptors/gitian-linux.yml
### (and possibly with local changes, see our git log)
### it seems to be on MIT licence: "Bitcoin Core is released under the terms of the MIT license":
### https://github.com/bitcoin/bitcoin/blob/0d0abcac1efeb94f441aa13714ba01ccfacc05c0/COPYING

WRAP_DIR="$HOME/wrapped"

HOST="x86_64-apple-darwin15"
COMPILERS="clang clang++"

CONFIGFLAGS="--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests"

FAKETIME_HOST_PROGS="ar strip nm otool"
FAKETIME_PROGS="date ar ranlib dmg genisoimage"

HOST_CFLAGS="-O2 -g"
HOST_CXXFLAGS="-O2 -g"
HOST_LDFLAGS="-static-libstdc++"

# importat:
export GZIP="-9n"
# export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
export TZ="UTC"

# set cache variables
GBUILD_CACHE_ENABLED=1
GBUILD_PACKAGE_CACHE="/home/ubuntu/cache/galaxy42"
GBUILD_COMMON_CACHE="/home/ubuntu/cache/common"

mkdir -p ${WRAP_DIR}
if test -n "$GBUILD_CACHE_ENABLED"; then
	export SOURCES_PATH=${GBUILD_COMMON_CACHE}
	export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
	mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
fi

function create_global_faketime_wrappers {
	for prog in ${FAKETIME_PROGS}; do
		local out="${WRAP_DIR}/${prog}"
		echo "" > "$out"
		echo '#!/bin/bash' > "$out"
		echo "REAL=\"$(which -a ${prog})\"" >> "$out"
		echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> "$out"
		echo "export FAKETIME=\"$1\"" >> "$out"
		echo '$REAL "$@"' >> "$out"
		chmod +x "$out"
	done
}

function create_per-host_faketime_wrappers {
	for i in $HOST; do
		for prog in ${FAKETIME_HOST_PROGS}; do
			local out="${WRAP_DIR}/${i}-${prog}"
			echo "" > "$out"
			echo '#!/bin/bash' >> "$out"
			echo "REAL=\"$(which -a ${i}-${prog})\"" >> "$out"
			echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> "$out"
			echo "export FAKETIME=\"$1\"" >> "$out"
			echo '$REAL "$@"' >> "$out"
			chmod +x "$out"
		done
		for prog in ${COMPILERS}; do
			local out="${WRAP_DIR}/${i}-${prog}"
			echo '#!/bin/bash' > "$out"
			echo "REAL=\"$(which -a ${i}-${prog})\"" >> "$out"
			echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> "$out"
			echo "export FAKETIME=\"$1\"" >> "$out"
			echo "export COMPILER_PATH=${WRAP_DIR}/${i}" >> "$out"
			echo "\$REAL \$@" >> "$out"
			chmod +x "$out"
		done
	done
}

# Create faketime timestamp

# Faketime for depends so intermediate results are comparable
export PATH_orig=${PATH}
create_global_faketime_wrappers "$FAKETIME"
create_per-host_faketime_wrappers "$FAKETIME"
export PATH=${WRAP_DIR}:${PATH}

# Faketime for binaries
export PATH=${PATH_orig}
create_global_faketime_wrappers "${REFERENCE_DATETIME}"
create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
export PATH=${WRAP_DIR}:${PATH}

# Create the release tarball using (arbitrarily) the first host

# ./autogen.sh # delete
# CONFIG_SITE=${BASEPREFIX}/`echo "${HOST}" | awk '{print $1;}'`/share/config.site ./configure --prefix=/ # needed for hosts?


printf "\n\n\nDoing boost static build\n\n\n"

printf "\nTEST TOOLS (in linux script):\n"
set -x
which gcc
which ar
which ranlib
gcc -v || fail "test gcc"
g++ -v || fail "test g++"
ar --version || fail "test ar"
ranlib --version || fail "test ranlib"
g++ -print-prog-name=ar
set +x
printf "\n\n"


# ** building boost **
pushd "${GALAXY_DIR}" || fail
	contrib/gitian-descriptors/libboost-build/build-boost-osx || fail "Failed to build dependence - boost lib for osx"
	cp "${BUILD_DIR}/boost/build-osx/lib/*.dylib" "${OUTDIR}" || fail "Failed to copy boost dylib files to out dir"
popd || fail
echo "\nAll done regarding boost.\n"

# ** building libsodium **
pushd "${GALAXY_DIR}" || fail
	contrib/gitian-descriptors/libsodium-build/build-sodium "${HOST}" || fail "Failed to build dependence - libsodium for osx"
	cp "${BUILD_DIR}/libsodium/libsodium-osx/lib/*.dylib" "${OUTDIR}" || fail "Failed to copy libsodium dylib files to out dir"
popd

# *** main build starts here ***
pushd "${GALAXY_DIR}"
	echo -e "\n\nDoing the build, inside Gitian in PWD=$PWD\n\n"

	export CC="x86_64-apple-darwin15-clang"
	export CXX="x86_64-apple-darwin15-clang++"

	git clean -fdx
	# make dist # delete
	COVERAGE=0 EXTLEVEL=0 \
	#	BUILD_STATIC=1
		BUILD_SET_BOOST_ROOT="${BUILD_DIR}/boost/build-osx/" \
		./do --go || fail "Failed to do the main build of our project"
	#############################################

	echo -e "\n\nBuild is done.\n\n"
popd


echo -e "\n\nBuild will start the linux packer.\n"
pushd "${GALAXY_DIR}" || fail
echo "In PWD=$PWD"
contrib/tools/build-pack-linux.sh || fail "Can not pack the build results"
popd || fail

### </LICENCE> - end of licence block

echo "Entire script in Gitian done"
date

