#!/usr/bin/env bash
# see below for LICENCE information, it can differ for this files or it's fragments.

set -o errexit
set -o nounset

readonly PROJECT_NAME="galaxy42"
readonly GALAXY_DIR="/home/ubuntu/build/galaxy42/"
readonly BUILD_DIR="/home/ubuntu/build/" # where deps are built

readonly WRAP_DIR="$HOME/wrapped"

# import another functions
. "${GALAXY_DIR}"/share/script/lib/fail.sh
. "${GALAXY_DIR}"/share/script/lib/create_faketime_wrappers.sh


printf "\n\n=========================================================================\n\n"
printf "PROJECT $PROJECT_NAME - INTERNAL (in-Gitian) WINDOWS BUILD SCRIPT\n"

function fail() {
	printf "\nERROR: the script failed (see above messages).\n\n"
	exit 1
}


# --- parse options
option_allow_boost=1
option_allow_sodium=1
option_shell_in_sodium=0
option_download_skip=0
option_verbose=0

while getopts ":vbsSDh" opt; do
	case $opt in
		D)
			echo "Skip all downloads"
			option_download_skip=1
			;;
		v)
			echo "Be verbose (show debug etc)"
			option_verbose=1
			;;
		b)
			echo "Will Skip boost"
			option_allow_boost=0
			;;
		s)
			echo "Will Skip sodium"
			option_allow_sodium=0
			;;
		S)
			option_shell_in_sodium=1
			;;
		h)
			cat <<EOF

This is the internal script to build Windows version of this project ($PROJECT_NAME).
It should be called by Gitian, inside LXC.
Developers can use it by doing on-target e.g. ./build-gitian on-target (as in Galaxy42)
and then calling it directly for testing.

Options:
	-v be verbose (debug)

	Speedup options:
	-D skip most downloads
	-b skips building Boost lib
	-s skips building Sodium lib

	Special options:
	-S starts a test shell before (possibly) building lib sodium

	Set env variable:
	TARGET_ARCH to x86_64-w64-mingw32 i686-w64-mingw32

EOF
			exit 0
			;;
		'?')
			printf "\n\nERROR: Unknown option, run with -h for help.\n"
			exit 1
			;;
		esac
done


# --- check arch option
if [[ $TARGET_ARCH == "x86_64-w64-mingw32" ]]; then
	echo "build deterministic for 64bit (TARGET_ARCH = $TARGET_ARCH) ..."
elif  [[ $TARGET_ARCH == "i686-w64-mingw32" ]]; then
	echo "build deterministic for 32bit (TARGET_ARCH = $TARGET_ARCH) ..."
else
	echo "TARGET_ARCH is not set."
	echo "Set TARGET_ARCH=x86_64-w64-mingw32 for 64-bit version or TARGET_ARCH=i686-w64-mingw32 for 32-bit."
	echo "Aborting."
	exit 1;
fi

export FAKETIME="$REFERENCE_DATETIME"
# variable from above yml config
echo "FAKETIME = ${FAKETIME}"
# debug

### <LICENCE> - start of licence block - this code if possibly on other licence:
### taken from https://raw.githubusercontent.com/bitcoin/bitcoin/.../contrib/gitian-descriptors/gitian-win.yml
### (from some version after 2c2d471e18f0601c2767cf516425b2ecfcfd2126, on day 2016-09-09 UTC)
### (and possibly with local changes, see our git log - though the initial commit of this file, already a bit modified,
### was possibly commited with us as the authors, so also diff the code vs bitcoin's version)
### it seems to be on MIT licence: "Bitcoin Core is released under the terms of the MIT license":
### https://github.com/bitcoin/bitcoin/blob/0d0abcac1efeb94f441aa13714ba01ccfacc05c0/COPYING

HOSTS="x86_64-w64-mingw32 i686-w64-mingw32" # related to $TARGET_ARCH
COMPILERS="g++ gcc cpp g++-posix gcc-posix cpp-posix cc c++" # do we need "cc c++"? TODO
NATIVE_COLPILATION_TOOLS="g++ gcc cpp cc c++ ar ranlib nm strip objcopy elfedit ld ld.bfd objdump readelf"

##  CONFIGFLAGS="--enable-reduce-exports --disable-bench --disable-gui-tests"
CONFIGFLAGS=""

FAKETIME_HOST_PROGS="ar ranlib nm windres strip objcopy dlltool elfedit ld ld.bfd objdump readelf windmc widl" # why  g++ is here and in COMPILERS? but gcc,... only there? TODO
FAKETIME_PROGS="date zip"

# We build own nsis from source. In this case we wrap makensis locally for our needs.
# This can be seen in script-"GALAXY_DIR/contrib/nsis-installer-windows/galaxy-windows-installer" that build windows installer.

# importat:
export GZIP="-9n"
# export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
export TZ="UTC"

# set cache variables
GBUILD_CACHE_ENABLED=1
GBUILD_PACKAGE_CACHE="/home/ubuntu/cache/galaxy42"
GBUILD_COMMON_CACHE="/home/ubuntu/cache/common"

mkdir -p ${WRAP_DIR}
if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
fi


# Wrap with FAKETIME: PROGS, HOST-PROGS and COMPILERS
export PATH_orig=${PATH}
create_global_faketime_wrappers "${FAKETIME_PROGS}" "${WRAP_DIR}"
create_global_faketime_wrappers "${NATIVE_COLPILATION_TOOLS}" "${WRAP_DIR}"
create_per-host_faketime_wrappers "${HOSTS}" "${FAKETIME_HOST_PROGS}" "${WRAP_DIR}"
create_per-host_linker_wrapper "${HOSTS}" "${COMPILERS}" "${WRAP_DIR}"
export PATH=${WRAP_DIR}:${PATH}


# *** main build starts here ***

## set compilators
export CC="$HOME/wrapped/$TARGET_ARCH-gcc-posix"
export CXX="$HOME/wrapped/$TARGET_ARCH-g++-posix"
export CPP="$HOME/wrapped/$TARGET_ARCH-cpp-posix"

printf "\nPWD=$PWD in script $0\n"

## get and build lib gettext
#printf "\n\n=========================================================================\n\n"
#printf "gettext\n\n"
#pushd ./galaxy42/depends/gettext/ || fail "Entering dir of gettext"
#rm -rf gettext-0.19.8/ libiconv-1.14/ || echo "clean previous gettext build, if there is"
#./build_gettext "$TARGET_ARCH" || fail "Building the gettext lib"
#popd
#printf "\n\n"


# ** building boost **
pushd "${GALAXY_DIR}" || fail
	contrib/gitian-descriptors/libboost-build/build-boost-multiarch || fail "Failed to build dependence - boost lib for ${TARGET_ARCH}"
popd || fail
echo "\nAll done regarding boost.\n"


printf "\n\n=========================================================================\n\n"
printf "libsodium...\n\n"
cd "$HOME/build/" || fail "Can not enter build dir"

if ((option_shell_in_sodium)) ; then
	printf "\nSTARTING TEST BASH (in sodium), while in PWD=$PWD\n"
	bash
	printf "\n\nresuming\n\n"
fi


# Setting libsodium path
if [[ $TARGET_ARCH == "x86_64-w64-mingw32" ]]; then
	SODIUM_ROOT="$HOME/build/libsodium/libsodium-win64"
elif  [[ $TARGET_ARCH == "i686-w64-mingw32" ]]; then
	SODIUM_ROOT="$HOME/build/libsodium/libsodium-win32"
fi


if ((option_allow_sodium)) ; then
printf "\n\nBuilding libsodium now\n\n"
## clone and build libsodium
rm -rf libsodium # perhaps left over if we do some caching or testing
set -x
git clone https://github.com/jedisct1/libsodium.git || fail # check gitrev hash below!

pushd libsodium || fail
git checkout 1.0.11 || fail
git clean -xdf

expected_gitrev="2f4f718cd94adab547c210a78050762cf667dfca" # this is the gitrev hash of this boost version (as we seen it)
confirm_gitrev=$(git log --format='%H' -1)
[[ "$confirm_gitrev" == "$expected_gitrev" ]] || {
	fail "Git verification of hash: hash is $confirm_gitrev instead of expected $expected_gitrev"
}


./autogen.sh || fail


printf "\n\nRunning the mingw-crossbuild-script(s) (of lib sodium)\n\n"

if [[ $TARGET_ARCH == "x86_64-w64-mingw32" ]]; then
	patched_msys_script="$HOME/build/galaxy42/contrib/gitian-patch/msys2-win64.sh"
	printf "\n\nPatching the mingw-crossbuild-script(s) (of lib sodium 64bit) - from file ($patched_msys_script)\n\n"
	cp  "$patched_msys_script"  "./dist-build/msys2-win64.sh" || fail
	./dist-build/msys2-win64.sh || fail
elif  [[ $TARGET_ARCH == "i686-w64-mingw32" ]]; then
	patched_msys_script="$HOME/build/galaxy42/contrib/gitian-patch/msys2-win32.sh"
	printf "\n\nPatching the mingw-crossbuild-script(s) (of lib sodium 32bit) - from file ($patched_msys_script)\n\n"
	cp  "$patched_msys_script"  "./dist-build/msys2-win32.sh" || fail
	./dist-build/msys2-win32.sh || fail
fi

printf "\n\nCrossbuild done (of lib sodium)"
popd

else
	SODIUM_DIR="/home/ubuntu/build/libsodium"
	[ -d "$SODIUM_DIR" ] || { echo "ERROR: $SODIUM_DIR directory does not exists, it looks like that sodium is not built. Skipping sodium build couldn't be done"; exit 1 ; }
	printf "\n\nSkipping sodium (as selected in options)\n\n"

fi



printf "\n\n=========================================================================\n\n"
printf "Main project ($PROJECT_NAME)...\n\n"

## Cross building galaxy42
cd "$GALAXY_DIR"

rm -rf CMakeFiles CMakeCache.txt # remove chache from previous build if any
git submodule update --init --recursive

echo "BOOST_ROOT: "$BOOST_DIR"/mingw_build "
echo "SODIUM_ROOT: $SODIUM_ROOT"

printf "\n\nMoving on to main build of actually our project:"

cmake -DBOOST_ROOT="$BOOST_DIR"/mingw_build -DSODIUM_ROOT_DIR="$SODIUM_ROOT" -DSODIUM_LIBRARY="$SODIUM_ROOT/lib/libsodium.dll.a" -DSODIUM_INCLUDE_DIR="$SODIUM_ROOT/include" -DTARGET_ARCH="$TARGET_ARCH" -DCMAKE_TOOLCHAIN_FILE="cmake/toolchain_mingw.cmake.in" -DCMAKE_BUILD_TYPE=Debug . || fail "cmake of our project failed"
make tunserver.elf || fail "make of our project (main binary) failed"
make galaxyService || fail "make of our project (main binary) failed"

echo "Printing checksums:"
sha256sum *.exe | sort
sha256sum  /home/ubuntu/build/galaxy42/contrib/windows-service-wrapper/galaxyService.exe
sha256sum  /home/ubuntu/build/boost/mingw_build/lib/*.dll* | sort
sha256sum  /home/ubuntu/build/libsodium/libsodium-win??/lib/*.dll* | sort

### </LICENCE> - end of licence block
echo "Entire script in Gitian done"
date
