#!/bin/bash
readonly myname=$(basename "$BASH_SOURCE")
function myprint { printf "%s[Script %s]: %s %s\n" "$(tput setab 6)" "$myname" "$*" "$(tput sgr0)" ; }

program_for_flags="./tunserver.elf"
program_to_run="./tunserver.elf"
myprint "Running program ($program_to_run) with SAFE MEMORY OPTIONS"

checks_enabled=0 # count checks we will enable
checks_existing=0 # count how many checks we could have run

${program_for_flags} --print-flags-flavour > /dev/null || { myprint "Can not run program to test flags ($program_for_flags)."; }

((checks_existing++)) || :
flagname="valgrind_memory_is_possible"
${program_for_flags} --print-flags-flavour | grep "$flagname" || {
	((checks_enabled++)) || :
	myprint "$(tput setab 1)Program to test flags ($program_for_flags) warned us that project is built with wrong flags for this test"
	myprint "$(tput setab 1)...see documentation how to configure program for this. (search name '$flagname')"
	exit 1 # <--- EXIT, giving up
}
# else, continue:

myprint "$(tput setab 1)Enabling valgrind memcheck"

cat <<EOF
  __  __ _____ __  __  ___  ______   __             __
 |  \\/  | ____|  \\/  |/ _ \\|  _ \\ \\ / /  ___  __ _ / _| ___
 | |\\/| |  _| | |\\/| | | | | |_) \\ V /  / __|/ __ | |_ / _ \\
 | |  | | |___| |  | | |_| |  _ < | |   \\__ \\ (_| |  _|  __/
 |_|  |_|_____|_|  |_|\\___/|_| \\_\\|_|   |___/\\__,_|_|  \\___|

EOF

myprint "All seems fine, running ($program_to_run)"

set -x
sudo valgrind ./nocap-tunserver.elf "$@" && { program_return=$? ; } || { program_return=$? ; } # ignore error (bash -e), and capture result
set +x

echo
(( $program_return == 0 )) && { myprint "$(tput setab 2)Exited with no error code" ;
	} || { myprint "$(tput setab 1)Exited with error code: $program_return" ; }

(( checks_enabled < checks_existing )) && myprint "$(tput setab 3)Warning: only some checks are enabled ($checks_enabled/$checks_existing)" ;

exit $program_return
