
- We developers should do following checks
- And you (end-user) can verify it on your own too!

Check this projects for security updates:

NATIVE_SYS = (if you built program nativly) This given system-wide library is taken from your OS.
Lib version: depends on distro. Not controlloed by us (developers of Galaxy42).
Keep your OS updated, and rebuild the program when ever any dependency of it is updated or changes.

NATIVE_INCODE = (if you built program nativly) This given library is included in build process of our program
(e.g. git downloaded / wget downloaded, and then built as part of our ./do cmake make etc).
Lib version: controlled by us (developers of Galaxy42) - included in our source code (e.g. git submodule or wget with version).
We will release new version of this project. You must download the new version and build it again, so that it will be build using
the upgraded library.

GITIAN_WIN_INCODE    = when building in Gitian, for Windows, then this library is taken as INCODE (see above).
GITIAN_WIN_SYS       = when building in Gitian, for Windows, then this library is taken as SYS (see above).
GITIAN_LINUX_SYS     = when building in Gitian, for Linux, then this library is taken as SYS (see above).
GITIAN_LINUX_INCODE  = when building in Gitian, for Linux, then this library is taken as INCODE (see above).

- libstd++     : NATIVE_SYS, GITIAN_WIN_SYS, GITIAN_LINUX_SYS
- libc         : NATIVE_SYS, GITIAN_WIN_SYS, GITIAN_LINUX_SYS
- other standard c libs - native.

- lib boost    : NATIVE_SYS, GITIAN_WIN_INCODE, GITIAN_LINUX_SYS
- lib sodium   : NATIVE_SYS, GITIAN_WIN_INCODE, GITIAN_LINUX_SYS
- lib sodiumpp : NATIVE_INCODE, GITIAN_WIN_INCODE, GITIAN_LINUX_INCODE
- lib jsoncpp  : NATIVE_INCODE, GITIAN_WIN_INCODE, GITIAN_LINUX_INCODE

- nsis program : GITIAN_WIN_INCODE

- libz - used to build nsis program (above). Maybe is delivered to finall install.exe ??

For windows gitian build we also depend on:
- DLL libraries from Cygwin/Mingw, see contrib/nsis-installer-windows/bin - check for updates!
- OpenVPN installer is downloaded and added into installer. Please make sure its version (and file hash) is up-to-date, in script contrib/nsis-installer-windows/galaxy-windows-installer + in file contrib/nsis-installer-windows/installer.nsi
- We also use custom Gitian project (git submodule).

=============================
Cap (linux Capability)

=== libcap-ng ===

We assume libcap-ng is not used by any other library, and that we're the only user of it (how ever the code should
be well enough to work even in most other cases, as the state "m" in that library is per-thread, and our capmodpp code
should try to reload cap state from kernel in important places)
If that is not correct assumption, then very carefully audit all code using that library, also in privileges.cpp to avoid
any race.

=== cap on binary ===

The binary file should have file-capabilities applied (as set by the build process / cmake),
you can test that with:
$ sudo getcap ./tunserver.elf
./tunserver.elf = cap_net_admin+eip

=== methods to start program regarding cap ===

1) run program as some user (or better a dedicated user like srv_yedino)
2) or instead: run program as root. Program will drop most privilages (cap). (TODO though it does not yet change UID/GID/etc)!!

=== testing if droping cap works ==

Droping capability:

The Cap Test: to see if program now runs with high cap (Capabilities),
install libcap-ng-utils and run:
sudo netcap | grep tunserver
it should show 0 lines if program has no caps (verify if program is running at all, with ps aux | grep tunserver)
Where tunserver is the name of binary e.g. from "tunserver.elf".

Testing:
1a) Start program as regular user, but add options: --insecure-cap 1 (also add option --d) ;
Then The Cap Test should show that program DOES have some Cap, e.g. cap net_admin is not dropped.
Program should work normally (create tuntap card).
1b) Start program as regular user; Then The Cap Test should show no Cap on the program.
Program should work normally (create tuntap card).

2a) Start program as the root, but add options: --insecure-cap 1 (also add option --d) ;
Then The Cap Test should show that program DOES have some Cap, e.g. cap net_admin is not dropped.
Program should work normally (create tuntap card).
2b) Start program as the root; Then The Cap Test should show no Cap on the program.
Program should work normally (create tuntap card).

=============================

- what about sub-dependencies of above, e.g. deps used by lib boost (e.g. gettext maybe)?

=============================

Planned (experimental code, disabled by default)
- lib ntru
- lib sidh

