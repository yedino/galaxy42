#include "bitcoin_node_cli.hpp"
#include <json.hpp>

bitcoin_node_cli::bitcoin_node_cli(const std::string &ip_address, unsigned short port)
:
	m_io_service(),
	m_btc_rpc_endpoint(boost::asio::ip::address_v4::from_string(ip_address), port),
	m_socket(m_io_service)
{
}

uint32_t bitcoin_node_cli::get_balance() {
	try {
	// TODO: array from wireshark equvalent to
	// POST / HTTP/1.1\n\rHost: ::1\n\rConnection: close\n\r
	// Authorization: Basic X19jb29raWVfXzpjNmI4OGIxZTY5MDM0ZmIyYmU2YmRiMzBhNjI5MTEyYzQ5ZDFjZjgxY2EyY2RmZjVlYWRjNjM2ZjYxYmQ2YzJl\n\r
	// Content-Length: 43\n\r{"method":"getbalance","params":[],"id":1}\n\r
	std::vector<unsigned char> get_balance_request = {
		0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x20, 0x48,
		0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d,
		0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x3a,
		0x3a, 0x31, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e,
		0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20,
		0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0d, 0x0a, 0x41,
		0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
		0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x42, 0x61,
		0x73, 0x69, 0x63, 0x20, 0x58, 0x31, 0x39, 0x6a,
		0x62, 0x32, 0x39, 0x72, 0x61, 0x57, 0x56, 0x66,
		0x58, 0x7a, 0x6f, 0x77, 0x4d, 0x6d, 0x4e, 0x6d,
		0x59, 0x7a, 0x42, 0x6c, 0x59, 0x6a, 0x45, 0x32,
		0x59, 0x57, 0x55, 0x31, 0x4f, 0x54, 0x51, 0x7a,
		0x4d, 0x44, 0x49, 0x78, 0x4d, 0x57, 0x56, 0x6c,
		0x5a, 0x54, 0x63, 0x30, 0x4e, 0x54, 0x63, 0x30,
		0x4e, 0x47, 0x56, 0x68, 0x4e, 0x54, 0x56, 0x6b,
		0x5a, 0x54, 0x6b, 0x34, 0x4d, 0x6a, 0x4d, 0x32,
		0x5a, 0x44, 0x6b, 0x7a, 0x4e, 0x54, 0x55, 0x32,
		0x59, 0x7a, 0x45, 0x35, 0x4d, 0x47, 0x4d, 0x78,
		0x4e, 0x7a, 0x45, 0x79, 0x4e, 0x6a, 0x67, 0x79,
		0x4e, 0x54, 0x51, 0x77, 0x4e, 0x6d, 0x4e, 0x68,
		0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
		0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
		0x3a, 0x20, 0x34, 0x33, 0x0d, 0x0a, 0x0d, 0x0a,
		0x7b, 0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
		0x22, 0x3a, 0x22, 0x67, 0x65, 0x74, 0x62, 0x61,
		0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2c, 0x22,
		0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3a,
		0x5b, 0x5d, 0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a,
		0x31, 0x7d, 0x0a};

		m_socket.connect(m_btc_rpc_endpoint);
		m_socket.send(boost::asio::buffer(get_balance_request));
		std::string receive_buffer(1024, '\0');
		size_t readed_bytes = m_socket.receive(boost::asio::buffer(&receive_buffer[0], receive_buffer.size()));

		receive_buffer.resize(readed_bytes);
		auto it = std::find(receive_buffer.begin(), receive_buffer.end(), '{'); // find begin of json data
		receive_buffer.erase(receive_buffer.begin(), it); // remove http POST data
		_mark(receive_buffer);
		const std::string btc_amount_str = receive_buffer.substr(10, 11);
		_mark("btc_amount_str " << btc_amount_str);
		std::stringstream ss(btc_amount_str);
		double btc_amount;
		ss >> btc_amount;

		return btc_amount * 10'000'000. ; // return balance in satoshi
	} catch (const std::exception &e){
		_erro(e.what());
		abort();
		return 0;
	}
}
