#!/bin/bash -e
echo -e "\nThis script can run the Gitian-Build of this project, to produce deterministic builds\n"

[ -r "toplevel" ] || { echo "Run this while being in the top-level directory; Can't find 'toplevel' in PWD=$PWD"; exit 1; }
dir_base_of_source='./'

lib='utils.sh'; source "${dir_base_of_source}/share/script/lib/${lib}" || {\
	eval_gettext "Can not find script library $lib (dir_base_of_source=$dir_base_of_source)" ; exit 1; }
lib='gitian-utils.sh'; source "${dir_base_of_source}/share/script/lib/${lib}" || {\
	eval_gettext "Can not find script library $lib (dir_base_of_source=$dir_base_of_source)" ; exit 1; }

my_dir="$PWD"
my_tmp="$my_dir/vartmp/build-gitian/" ; rm -rf "$my_tmp" || exit
function script_cleanup() {
	rm --one-file-system -rf "$my_tmp"
}
trap script_cleanup EXIT
mkdir -p "$my_tmp" || exit

# --- config ---

# Where from get the Gitian tool itself:
gitiansoftware_url="https://github.com/yedino/gitian-builder.git"
#"https://github.com/devrandom/gitian-builder.git"
gitiansoftware_checkout="0db6c052004c51a3f163048fe2a207af0854b78e"
# "ee1b69d6949810069453d5540af7a0b3ca63ea8d"

target_repo_user="rfree-d" # must be same in: /build-gitian and in main YML file (which names is in $gitian_yml_file)
target_name="galaxy42" # this also becomes name of the directory in ~/
target_url="https://github.com/${target_repo_user}/${target_name}.git"
# target_checkout="wip_cross_win" # <--- pick any version
gitian_suite=xenial
base_dir="$HOME/var-gitian/"
gitian_yml_file="main-build/galaxy-windows.yml" # must be under contrib/gitian-descriptors/

# take "my" YML
gitian_yml_file_full="$my_dir/contrib/gitian-descriptors/${gitian_yml_file}"

target_dbs="${base_dir}debootstrap/"

# ---

# get our own version
info_thisscript="$( git describe  --dirty="-DIRTY-NOT-COMMITED" )"
echo -e "Building using the build script from: $info_thisscript\n"

# cd
echo "Working in base_dir=${base_dir}"
mkdir -p "$base_dir" || fail "Can not create the base dir ($base_dir)"
cd "$base_dir" || fail "Can not enter the base dir ($base_dir)"

#set -x

function fix_template_script() {
	# fix Debian Jessie (and any other distro) that lacks Xenial script/template in it's debootstrap.
	# gbuild calls ---> make-base-vm (it's own script) ---> that calls debootstrap from system.
	# debootstrap uses dir DEBOOTSTRAP_DIR=/usr/share/debootstrap to load templates.
	# that dir contains:
	# devices.tar.gz  functions/  scripts/
	# and the subdir scripts/ needs to have script e.g. "xenial" (when we use xenial ubuntu in our Gitian process)
	if [[ ! -z "$buildgitian_dbs_skip_template_fix" ]] ; then printf "Skipping debootstrap template fix (due to options)\n"; return ; fi

	if [[ ! -z "$buildgitian_dbs_sys" ]] ; then
		dbs_sys="$buildgitian_dbs_sys"
	else
		dbs_sys="/usr/share/debootstrap" # system's location of debootstrap
		[[ -r "$dbs_sys" ]] || {
			printf "Warning: Can not read debootstrap data dir [$dbs_sys]\n"
			dbs_sys="/usr/local/share/debootstrap" # other location
			[[ -r "$dbs_sys" ]] || {
				printf "Warning: Can not read debootstrap data dir [$dbs_sys]\n"
				printf "Error: Debootstrap seems not installed\n" ; exit 1; # exit
			}
		}
	fi

	printf "Assuming debootstrap system's version data dir is dbs_sys=$dbs_sys"

  suite="$gitian_suite"
  rm -rf "${target_dbs}"
  mkdir -p "${target_dbs}"
  if [[ ! -r "$dbs_sys/scripts/$suite" ]] ; then
  	echo "Your system seems to lack te debootstrap template for suite '$suite', we will work around this now."

		for item_full in "${dbs_sys}"/*  ; do # link top level things, e.g. "functions/" except for scripts/
			[[ -e "$item_full" ]] || { echo "Can not read item_full (step1) $item_full" ; exit 1 ; }
			item="${item_full##*/}"
			echo "(step1) item_full=$item_full item=$item"
			if [[ "$item" != "scripts" ]] ; then
				ln -s "$item_full" "${target_dbs}" # link whole subdir
			fi
		done

		mkdir "${target_dbs}/scripts"
		for item_full in "${dbs_sys}/scripts"/*  ; do # link all scripts
				echo "(step2) item_full=$item_full"
				ln -s "$item_full" "${target_dbs}scripts" # link a script
		done

		# add our script file:
		cp "${my_dir}/contrib/gitian-debootstrap/scripts/${suite}" $"$target_dbs/scripts/"

		export DEBOOTSTRAP_DIR="$target_dbs"
		export GITIAN_SUDO_USE_DEBOOTSTRAP_DIR="yes"
		echo "Exporting DEBOOTSTRAP_DIR=$DEBOOTSTRAP_DIR GITIAN_SUDO_USE_DEBOOTSTRAP_DIR=$GITIAN_SUDO_USE_DEBOOTSTRAP_DIR"
	else
		echo "Your system's debootstrap seems ready to support suite '$suite' - no need to fix anything there."
	fi
}

function set_env() {
	export USE_LXC=1
	export PATH="$PATH:$base_dir/gitian-builder/libexec"
	export LXC_ARCH=amd64
	export LXC_SUITE="$gitian_suite"
	# export VERSION=""

	export GITIAN_HOST_IP=10.0.3.2
	export LXC_GUEST_IP=10.0.3.5
}

function fail() {
	echo "Error occured, will exit ($1)"
	exit 1
}

function setup_host_for_lxc() {
	cat <<EOF

TODO

This is not yet implemented here, do it yourself - see doc/*gitian*
do that setup, and then you will probably need to **reboot computer**
EOF

	echo "Press any key - after reading above" ; read _
}

function gitian_builder_download() {
	if false ; then
		printf "\n\nSKIPPING download of Gitian\n\n" # e.g. for debug of ${base_dir}/gitian-builder that you now edit there
	else
		echo "Downloading gitian-builder itself"
		sudo rm -rf "${base_dir}/gitian-builder" || fail "remove gitian"
		cd "${base_dir}" || fail "cd base dir"
		git clone "$gitiansoftware_url" || fail "while downloading gitian"
		cd gitian-builder || fail
		git reset --hard "$gitiansoftware_checkout" || fail "Choosing gitian version (step 1)"
		confirm_git_ver=$(git log --format '%H' -1)
		[[ "$confirm_git_ver" != "$gitiansoftware_checkout" ]] || fail "Choosing gitian version (step 2)"
	fi
}

function gitian_builder_make_lxc_image() {
	echo "(from $0) Making the LXC image (with DEBOOTSTRAP_DIR=$DEBOOTSTRAP_DIR)"
	cd "${base_dir}/gitian-builder/" || fail
	bin/make-base-vm --lxc --arch amd64 --suite xenial || fail "to create Xenial image (do you have the Xenial template and apt-cacher-ng running?)"
}

function gitian_detect_source_version() {
	pushd "$my_dir"
	printf "%s\n" "Detecting git version (revision) from PWD=$PWD."
	gv=$(git log --format '%H' -1) || fail "Can not detect git version (revision) form PWD=$PWD"
	target_checkout="$gv"
	printf "%s\n" "Detected and will use: target_checkout=$target_checkout"
	popd
}

function target_download() {
	gitian_detect_source_version
	printf "\n%s\n" "Will download target to ${base_dir} (${target_name})"
	cd "${base_dir}" || fail
	rm -rf "${base_dir}/${target_name}/" || fail
	git clone "$target_url" || fail "Download target"
	cd "${base_dir}/${target_name}" || fail
	printf "%s\n" "On host we start with download of (${target_name}) in version:"
	git log -1
	git clean -xdf || fail
	git checkout "$target_checkout" || fail "Download target in given version (step 1)"
	confirm_git_ver=$(git log --format '%H' -1)
	[[ "$confirm_git_ver" != "$gitiansoftware_checkout" ]] || fail "Download target in given version (step 2)"
	git clean -xdf || fail "Doing git-clean"
	git log -1 || fail "Show git-version"
	printf "\n\n\n"
}

function gitian_run_build() {
	gitian_detect_source_version
	cd "$base_dir/gitian-builder/" || fail
	printf "\nWill use YML Gitian file: $gitian_yml_file_full\n\n"
	cat "$gitian_yml_file_full" | egrep -H -n -i "commit|url|dir"

	exit 1

	set -x
	./bin/gbuild \
		--commit galaxy42=${target_checkout} --url galaxy42=${target_url} \
		--allow-sudo  \
		"$gitian_yml_file_full" \
	|| {
		set +x
		fail "Build with gbuild"
	}
	set +x
	echo "Build with gbuild - done"
}

function string_limitlen() {
	thestr="$1" ; elipsis="-" ;
	l1=3 ; l2=1 ; l3=${#elipsis} ;
	if (( ${#thestr} > (l1+l2+l3) )) ; then echo "${thestr:0:l1}${elipsis}${thestr:(-l2):l2}" ; else echo "$thestr" ; fi
}

function get_host_info() {
	user_s=$(string_limitlen "$USER")
	hostname_s=$(string_limitlen "$HOSTNAME")
	echo "$user_s@$hostname_s"
}

function gitian_show_result() {
	info_gitian=$(cd "${base_dir}/gitian-builder/" ; git log -1 | head -n 1 | cut -d' ' -f2 | head -c 8)
	info_target=$(cd "${base_dir}/${target_name}/" ; git log -1 | head -n 1 | cut -d' ' -f2 | head -c 999)
	#info_binary=$(on-target sha256sum build/galaxy42/tunserver.elf.exe)
	info_binary=$(  find  /home/ubuntu/build/boost/mingw_build/lib/*   /home/ubuntu/build/libsodium/*/bin/   -name  '*.dll' -o -name '*.exe'    ; ls -1 /home/ubuntu/build/galaxy42/*exe | sort   )
	#info_binary=$(on-target sha256sum build/galaxy42/tunserver.elf.exe)
	info_binary_first=$( printf "$info_binary" | head -n 1)
	info_host="$(get_host_info)"
	info_target_yml=$( python3 ${my_dir}/contrib/gitian-tools/get_version_from_yaml.py  "$gitian_yml_file_full" | cut -d' ' -f1 | head -c 8 )

	echo "Script ${info_thisscript} using Gitian ($info_gitian) of $target_name $info_target ($info_target_yml) gives $info_binary_first on $info_host"
}

info_host=$(get_host_info)
echo "Running on host (shortcut name): $info_host"

function all_including_new_lxc() {
	set_env
	fix_template_script
	gitian_builder_download
	gitian_check_net_devices "loud"
	gitian_builder_make_lxc_image
	target_download
	gitian_run_build
	gitian_show_result
}

function all_excluding_new_lxc() {
	set_env
	fix_template_script
	gitian_check_net_devices "loud"
	target_download
	gitian_run_build
	gitian_show_result
}

function special_command_on_target() {
	set_env
	echo "Starting a console on the Image of for-Gitian system. PATH=$PATH"
	cd "${base_dir}/gitian-builder" || fail "cd dir of gitian-builde"
	echo "PWD=$PWD"
	set -x
	on-target $@
	set +x
	echo "Exited from Image"
}

cat <<EOF
Usage: call this program with one argument, either:

  install - installs everything, this will do a sudo and as root will setup it all - run it once
  image - also recreates the System Image (e.g. LXC) - run it once (as user) and then from time to time
  fast - faster gbuild, no re-creationg of System Image (e.g. LXC) - run it often

  on-target - opens a bash console inside the System Image (e.g. LXC) so you can debug it here
  on-target-root - same, but you are the root user (insie System Image e.g. LXC)

  Configuration options, set env variables:
    export buildgitian_dbs_skip_template_fix=1 to skip the automatic debootstrap template fix
    export buildgitian_dbs_sys="/some/dir" to force the debootstrap template fix to search there for it's files

EOF

if [[ "$1" == "install" ]] ; then  setup_host_for_lxc ; fi
if [[ "$1" == "image" ]] ; then all_including_new_lxc ; fi
if [[ "$1" == "fast" ]] ; then all_excluding_new_lxc ; fi

if [[ "$1" == "on-target" ]] ; then special_command_on_target ; fi
if [[ "$1" == "on-target-root" ]] ; then special_command_on_target "-u" "root" ; fi

