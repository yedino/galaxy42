
- We developers should do following checks
- And you (end-user) can verify it on your own too!

Source of dependency:

| library          | Linux     | Lin. Gitian | Win. Mingw | Win. Gitian | Win. MSVC | Macosx     | Mac. Gitian |
|------------------|-----------|-------------|------------|-------------|-----------|------------|-------------|
| libstd++/libc    | sys       | sys-Gitian  | sys-cygwin | sys-Gitian  | sys       | sys        | sys-Gitian  |
| boost            | sys       | sys-Gitian  | sys-cygwin | ext/git     | sys       | sys-Gitian |             |
| sodium           | sys       | sys-Gitian  | sys-cygwin | ext/git     | sys       | sys-Gitian |             |
| sodiumpp         | fork/subm | fork/subm   | fork/subm  | fork/subm   | fork/subm | fork/subm  | fork/subm   |
| nlohmann_json    | ext/subm  | ext/subm    | ext/subm   | ext/subm    | sudmod    | ext/subm   | ext/subm    |
| backward-cpp     | ext/subm  | ext/subm    | ext/subm   | ext/subm    | ext/subm  | ext/subm   | ext/subm    |
| cotire           | ext/subm  | ext/subm    | ext/subm   | ext/subm    | ext/subm  | ext/subm   | ext/subm    |
| googletest       | ext/subm  | ext/subm    | ext/subm   | ext/subm    | ext/subm  | ext/subm   | ext/subm    |
| ntru-crypto [NO] | ext/subm  | ext/subm    | ext/subm   | ext/subm    | ext/subm  | ext/subm   | ext/subm    |
| SIDH        [NO] | ext/subm  | ext/subm    | ext/subm   | ext/subm    | ext/subm  | ext/subm   | ext/subm    |
| cjdns/netplatf.  | fork/copy | fork/copy   | rewritten  | rewritten   | rewritten | fork/copy  | fork/copy   |
| libz             | -         | -           | -          | sys+ext/wget| -         | -          | -           |
| nsis util        | -         | -           | -          | ext/wget    | sys       | -          | -           |
| libqt5           | sys       |(sys-Gitian) | sys/qtcreat| sys+ext/wget| -         | sys/brew   | sys+ext/wget|

We must track following dependencies, this is a form for checking them;


Copy this text into SECURITY-this-release.txt (and commit an not-checked version), then commit checked ([x]) version,

---------------------
Checking started on: [                ] (UTC)
Checking done on:    [                ] (UTC)

[ ] We pick our own code in version without known security issues

[ ] sodiumpp submodule and upstream tracking !
[ ] nlohmann_json submodule
[ ] backward-cpp submodule
[ ] cotire submodule
[ ] googletest submodule
[ ] cjdns/netplatform upstream tracking !
[ ] libqt5 library release for Linux
[ ] libqt5 library release for Windows (mingw)
[ ] libqt5 library release for Macosxupstream
[ ] libz wget download
[ ] nsis wget download

For windows gitian build we also depend on:
[ ] {outdated! now we take it from system installation of crosscompiler in Gitian!},
was: DLL libraries from Cygwin/Mingw, see contrib/nsis-installer-windows/bin - check for updates!
[ ] OpenVPN installer is downloaded and added into installer. Please make sure its version (and file hash) is up-to-date,
    see script `contrib/nsis-installer-windows/galaxy-windows-installer` + file `contrib/nsis-installer-windows/installer.nsi`
[ ] We also use custom Gitian project (git submodule), see `https://github.com/yedino/gitian-builder.git` from `./build-gitian`

For macosx Gitian we also depend on:
[ ] macosx SDK
[ ] cpio program `contrib/macdeploy/build-cpio.sh` - `https://ftp.gnu.org/gnu/cpio/cpio-2.12.tar.gz`
---------------------

Legend used in table:
* [NO] - this code is not supported, no need to track it (e.g. code use is disabled)
* ext/git - external code, we download it via git and build it (we should check git checksum)
* ext/wget - external code, we download it via wget or other http, and build it (we should check file checksum)
* fork - we base on external upstream project, and we apply custom changes to it. we MUST track upstream for security fixes
* fork/copy - as above, the source code is copied and is part of our main repository with all the source code
* fork/subm - as above, the source code is attached as a git submodule
* rewritten - we rewritten the code, instead of just forking it, based on some extenal ideas/examples
* tool-sys - This is a tool, that we need to run, and we take it from system.
* sys-Gitian - we take it from system on the Gitian environment (e.g. the Ubuntu Xenial; see details below)

Details:

* Sys-Gitian (for Windows target)
The Gitian platform (e.g. Ubuntu), provides cross-compiler suite, that includes C++ compiler and libstd++
then we take it's libraries; e.g. we take it's .dll file and copy it and pack with program (NSIS installer)
for example look in `contrib/nsis-installer-windows/bin/download.sh`, we take file as:
`takedll x86 /usr/lib/gcc/i686-w64-mingw32/5.3-posix/libstdc++-6.dll`

* sys-Gitian (for Macosx target)
The Gitian platform (e.g. Ubuntu), provides cross-compiler suite, that includes C++ compiler and libstd++
(also some files are from macosx SDK package, that is installed into Gitian as part of the Gitian process)
some of this libs are linked statically,
others are copied as `.dylib` files, see `contrib/macdeploy/build-dmg.sh`

* sys-Gitian (for Linux target)
The Gitian platform (e.g. Ubuntu), provides native-compiler suite, that includes C++ compiler and libstd++
also other libraries are taken from system libraries.
They are linked in statically,
others are copied as `.so`a file, see ``.

* libz - (zlib1g-dev) we need this dev lib to be in system because we rebuild NSIS on Gitian from source-code
(afair to fix it to be deterministic).

* libqt - [work in progress], we build it as native: on Linux from repo, on Windows - qtcreator (mingw),
on Macosx - qtcreator (in brew?). Gitian process is not ready, but we plan: for Linux target: take system (Gitian) libs,
for Windows target tell crosscompiler/qmake to use locally installed/unpacked qt...windows.zip, same on macosx.
Windows/MSVC native is not planned currently (could be used by switching compiler in QTcreator probably).
E.g. downloads from:
https://www1.qt.io/download-open-source/?hsCtaTracking=f977210e-de67-475f-a32b-65cec207fd03%7Cd62710cd-e1db-46aa-8d4d-2f1c1ffdacea#section-2
http://download.qt.io/official_releases/qt/5.9/5.9.2/qt-opensource-linux-x64-5.9.2.run
http://download.qt.io/official_releases/qt/5.9/5.9.2/qt-opensource-mac-x64-5.9.2.dmg
http://download.qt.io/official_releases/qt/5.9/5.9.2/qt-opensource-windows-x86-5.9.2.exe
(and updated versions)

=============================
Sanitiziers

=== UBSAN ===
Can be enabled in ccmake options when using clang compiler (works on Linux amd64).
In such build, test it (in newloop) with option --special-ubsan1
Run with env option:
`export UBSAN_OPTIONS="print_stacktrace=1"`
to see backtrace on such warnings, though only from traces done when CAP/capability are dropped (e.g. in main loop).

=============================
Cap (linux Capability)

=== libcap-ng ===

We assume libcap-ng is not used by any other library, and that we're the only user of it (how ever the code should
be well enough to work even in most other cases, as the state "m" in that library is per-thread, and our capmodpp code
should try to reload cap state from kernel in important places)
If that is not correct assumption, then very carefully audit all code using that library, also in privileges.cpp to avoid
any race.

=== cap on binary ===

The binary file should have file-capabilities applied (as set by the build process / cmake),
you can test that with:
$ sudo getcap ./tunserver.elf
./tunserver.elf = cap_net_admin+eip

=== methods to start program regarding cap ===

1) run program as some user (or better a dedicated user like srv_yedino)
2) or instead: run program as root. Program will drop most privilages (cap). (TODO though it does not yet change UID/GID/etc)!!

=== testing if droping cap works ==

Droping capability:

The Cap Test: to see if program now runs with high cap (Capabilities),
install libcap-ng-utils and run:
sudo netcap | grep tunserver
it should show 0 lines if program has no caps (verify if program is running at all, with ps aux | grep tunserver)
Where tunserver is the name of binary e.g. from "tunserver.elf".

Testing:
1a) Start program as regular user, but add options: --insecure-cap 1 (also add option --d) ;
Then The Cap Test should show that program DOES have some Cap, e.g. cap net_admin is not dropped.
Program should work normally (create tuntap card).
1b) Start program as regular user; Then The Cap Test should show no Cap on the program.
Program should work normally (create tuntap card).

2a) Start program as the root, but add options: --insecure-cap 1 (also add option --d) ;
Then The Cap Test should show that program DOES have some Cap, e.g. cap net_admin is not dropped.
Program should work normally (create tuntap card).
2b) Start program as the root; Then The Cap Test should show no Cap on the program.
Program should work normally (create tuntap card).

=============================

- what about sub-dependencies of above, e.g. deps used by lib boost (e.g. gettext maybe)?

=============================

Planned (experimental code, disabled by default)
- lib ntru
- lib sidh

