#!/usr/bin/env bash

# importing functions for boost main and submodules download
. /home/ubuntu/build/galaxy42/contrib/gitian-descriptors/libboost-build/dl-boost-submodules
. /home/ubuntu/build/galaxy42/contrib/gitian-descriptors/libboost-build/dl-boost

function fail() {
    printf "\nERROR: the script failed (see above messages).\n\n"
	exit 1
}

## clone and build boost
printf "\n\n=========================================================================\n\n"
printf "boost...\n\n"
readonly BOOST_DIR="$HOME/build/boost/"

cd "$HOME/build/" || fail "Can not enter build dir"
 
option_download_skip=0  # XXXXXXXXXXXXXXXXX
option_allow_boost=1

if (( option_allow_boost )) ; then
	printf "\n\nWill build boost now\n\n"

    if (( option_download_skip )) ; then
        printf "\n\n\n\nSkipping download (boost)\n\n\n\n"

    else
        # Download main boost repository
        dl_boost
		pushd boost || fail "Can not enter build dir"
			# Download boost submodules in n=3 attempts
			dl_boost_submodules_n 3
		popd
    fi

pushd boost || fail # cd
pwd
ls

echo "Will build boost in PWD=$PWD"
# delete it to have a clean build (even if we keept downloaded PREVIOUSLY files)
git clean -xdf || fail
rm -rf build-osx || fail
# reset and claen boost submodules
git submodule foreach git reset --hard HEAD
git submodule foreach git clean -fdx

# patching boost locale - detecting iconv
patch "$BOOST_DIR/libs/locale/build/Jamfile.v2" < "$HOME/build/galaxy42/contrib/gitian-patch/workaround-boost-12570.patch"


boost_user_gcc="/home/ubuntu/build/osxcross/target/bin/x86_64-apple-darwin15-clang++-libc++"
AR="/home/ubuntu/build/osxcross/target/bin/x86_64-apple-darwin15-ar"
LD="/home/ubuntu/build/osxcross/target/bin/x86_64-apple-darwin15-ld"
STRIP="/home/ubuntu/build/osxcross/target/bin/x86_64-apple-darwin15-strip"
RANLIB="/home/ubuntu/build/osxcross/target/bin/x86_64-apple-darwin15-ranlib"

printf "\n\nWill set boost user config to use compiler: (%s)\n" "$boost_user_gcc"

printf "\n\nBoost build - main part (PWD=$PWD). ls:\n" ; ls ; printf "\n\n"
#echo "# This config was GENERATED (will be over-written) by $0." > user-config.jam || fail
rm "$HOME/user-config.jam"
echo "using darwin : : $boost_user_gcc : <linker-type>\"darwin\" <cxxflags>\"-arch x86_64  -std=c++14 -fvisibility=hidden -mmacosx-version-min=10.7 -march=core2 --sysroot=/home/ubuntu/build/osxcross/target/bin/../SDK/MacOSX10.11.sdk\" <linkflags>\"\"  <archiver>\"$AR\" <striper>\"$STRIP\" <ranlib>\"$RANLIB\" :  ;" >> "$HOME/user-config.jam" || fail
# <linker-type>darwin

  printf "\nTEST TOOLS (in BOOST script):\n"
  set -x
  which gcc
  which ar
  which ranlib
  gcc -v || fail "test gcc"
  g++ -v || fail "test g++"
  ar --version || fail "test ar"
  ranlib --version || fail "test ranlib"
  g++ -print-prog-name=ar
  set +x
  printf "\n\n"


printf "\n\nBoost bootstrap...\n\n"
./bootstrap.sh --without-icu || fail
printf "\n\nBoost bootstrap is done.\n\n"
ls

./b2 clean

printf "\n\nBoost b2 headers...\n\n"
./b2 -q headers || fail "b2 headers"

printf "\n\nStarting the b2 boost build\n\n"
b2_opt_with_lib=( "--with-filesystem" "--with-system" "--with-program_options" "--with-thread" )
b2_opt_debug=( )
if (( option_verbose )) ; then
    b2_opt_debug=( "-d" "4" "--debug-building" )
fi

set -x
./b2 \
    -q \
    "${b2_opt_debug[@]}" \
    -a variant=release \
    --toolset=darwin --toolset-root="$HOME/build/osxcross/target/bin/"  \
    --prefix=/"$BOOST_DIR"/build-osx \
    target-os=darwin  \
    architecture=x86 address-model=64 \
    boost.locale.icu=off boost.locale.iconv=on \
    --build-type=complete \
    --arch=x86_64 \
    threadapi=pthread threading=multi \
    link=shared runtime-link=shared \
    "${b2_opt_with_lib[@]}" \
    -j 1 \
    -sNO_BZIP2=1 --sNO_ZLIB=1 \
    --layout=tagged install \
		|| {
			set -x
			fail "The b2 build of boost failed"
		}
set +x

printf "\n\n\n\nDONE the b2 boost build\n\n\n\n"

# copy all boost includes for header only libraries
#find ./libs -maxdepth 6 -type d -print0 | while IFS= read -rd '' D; do
#    substr="include"
#    if  test "${D#*$substr}" != "$D" # looking for include dir's
#    then
#        end_of=$(echo $D | tail -c 8) # 8 = len(include) + end string char
#        #echo "$end_of"
#        if [ $end_of = $substr ]
#        then
#            cp -r "$D" ./build-osx || fail "Can not copy $D"
#        fi
#    fi
#done

popd

printf "\n\nFixing up static library names. [TODO] why is this needed?!\n\n\n"
#pushd /home/ubuntu/build/boost/build-osx/lib/ || "Enter dir of boost build-osx, to fix it"
#	for x in system filesystem locale program_options thread ; do ln -s  libboost_$x-mt-s.a  libboost_$x-mt-1_61.a ; done
#popd



else
    printf "\n\nSkipping boost (as selected in options)\n\n"

fi

