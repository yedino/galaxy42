#!/bin/bash
# see below for LICENCE information, it can differ for this files or it's fragments.


function fail() {
	echo -e "\nERROR (in $0): " "$@"
	exit 1
}

OUTDIR="$1"
export OUTDIR
echo "$0: OUTDIR=$OUTDIR"

  GALAXY_DIR="/home/ubuntu/build/galaxy42/"
  BUILD_TOP_DIR="/home/ubuntu/build/" # where deps are built

  REFERENCE_DATETIME="2016-08-01 00:00:00"

  export FAKETIME="$REFERENCE_DATETIME"
  # variable from above yml config
  echo "FAKETIME = ${FAKETIME}"
  # debug

  ### <LICENCE> - start of licence block - this code if possibly on other licence:
  ### taken from https://raw.githubusercontent.com/bitcoin/bitcoin/2c2d471e18f0601c2767cf516425b2ecfcfd2126/contrib/gitian-descriptors/gitian-linux.yml
  ### (and possibly with local changes, see our git log)
  ### it seems to be on MIT licence: "Bitcoin Core is released under the terms of the MIT license":
  ### https://github.com/bitcoin/bitcoin/blob/0d0abcac1efeb94f441aa13714ba01ccfacc05c0/COPYING

  WRAP_DIR="$HOME/wrapped"

  ##HOSTS="i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu"
  HOSTS="x86_64-linux-gnu"

  COMPILERS="g++ gcc"

  CONFIGFLAGS="--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests"
  # CONFIGFLAGS=""

  FAKETIME_HOST_PROGS="ar ranlib nm ld ldd"
  FAKETIME_PROGS="date ar ranlib nm ld ldd"

  # TODO?
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"
  # TODO? this seems to cause some problems on bitcoin: any change to library...
  # seem to cause totally differet binary (other address of function)?
  HOST_LDFLAGS=-static-libstdc++

  # (not used?)
  export QT_RCC_TEST=1

  # importat:
  export GZIP="-9n"
  export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
  export TZ="UTC"

  # ok?
  export BUILD_DIR=`pwd`

  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    out="${WRAP_DIR}/${prog}"
    echo "" > "$out"
    echo '#!/bin/bash' > "$out"
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> "$out"
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> "$out"
    echo "export FAKETIME=\"$1\"" >> "$out"
    echo '$REAL "$@"' >> "$out"
    chmod +x "$out"
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
	out="${WRAP_DIR}/${i}-${prog}"
	echo "" > "$out"
        echo '#!/bin/bash' >> "$out"
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> "$out"
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> "$out"
        echo "export FAKETIME=\"$1\"" >> "$out"
        echo '$REAL "$@"' >> "$out"
        chmod +x "$out"
    done
  done
  }

# Create faketime timestamp

LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1 \
	FAKETIME="$FAKETIME" touch /tmp/faketime_timestamp

stat /tmp/faketime_timestamp

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "$FAKETIME"
  create_per-host_faketime_wrappers "$FAKETIME"
  export PATH=${WRAP_DIR}:${PATH}

  EXTRA_INCLUDES_BASE=$WRAP_DIR/extra_includes
  mkdir -p $EXTRA_INCLUDES_BASE

  # x86 needs /usr/include/i386-linux-gnu/asm pointed to /usr/include/x86_64-linux-gnu/asm,
  # but we can't write there. Instead, create a link here and force it to be included in the
  # search paths by wrapping gcc/g++.

  mkdir -p $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu
  rm -f $WRAP_DIR/extra_includes/i686-pc-linux-gnu/asm
  ln -s /usr/include/x86_64-linux-gnu/asm $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu/asm

  for prog in ${COMPILERS}; do
  echo "Creating writer for compiler prog=$PROG with FAKETIME=${REFERENCE_DATETIME}"
  out="${WRAP_DIR}/${prog}"
  rm -f "$out"

cat << EOF > "$out"
#!/bin/bash
  REAL="`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1`"
  for var in "\$@"
  do
    if [ "\$var" = "-m32" ]; then
      export C_INCLUDE_PATH="$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu"
      export CPLUS_INCLUDE_PATH="$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu"
      break
    fi
  done
  export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1
  export FAKETIME="${REFERENCE_DATETIME}"
  "\$REAL" "\$@"
EOF

  chmod +x "$out"
  done






  if false ; then # TODO
  cd bitcoin
  BASEPREFIX=`pwd`/depends
  # Build dependencies for each host
  for i in $HOSTS; do
    EXTRA_INCLUDES="$EXTRA_INCLUDES_BASE/$i"
    if [ -d "$EXTRA_INCLUDES" ]; then
      export HOST_ID_SALT="$EXTRA_INCLUDES"
    fi
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
    unset HOST_ID_SALT
  done
  fi

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Create the release tarball using (arbitrarily) the first host

  # ./autogen.sh # delete
  # CONFIG_SITE=${BASEPREFIX}/`echo "${HOSTS}" | awk '{print $1;}'`/share/config.site ./configure --prefix=/ # needed for hosts?


  printf "\n\n\nDoing boost static build\n\n\n"

  printf "\nTEST TOOLS (in linux script):\n"
  set -x
  which gcc
  which ar
  which ranlib
  gcc -v || fail "test gcc"
  g++ -v || fail "test g++"
  ar --version || fail "test ar"
  ranlib --version || fail "test ranlib"
  g++ -print-prog-name=ar
  set +x
  printf "\n\n"

#  printf "\n\n\n=== TEST SHELL - TRY IF GCC WORKS HERE ===\n"
# sh
# printf "\n\n=== EXITED TEST SHELL ==="
# sleep 1 # XXX

  pushd "${GALAXY_DIR}" || fail
  contrib/gitian-descriptors/libboost-build/build-boost-static || fail "Failed to build dependence - static boost lib"
  popd || fail
  echo "\nAll done regarding boost.\n"

  # *** main build starts here ***
  pushd galaxy42
  echo -e "\n\nDoing the build, inside Gitian in PWD=$PWD\n\n"

  git clean -fdx
  # make dist # delete
  COVERAGE=0 EXTLEVEL=0 \
    BUILD_STATIC=1 BUILD_SET_BOOST_ROOT="$BUILD_TOP_DIR/boost/static-build/" \
    ./do --go || fail "Failed to do the main build of our project"
  #############################################

  echo -e "\n\nBuild is done.\n\n"
  popd


echo -e "\n\nBuild will start the linux packer.\n"
pushd "${GALAXY_DIR}" || fail
contrib/tools/build-pack-linux.sh || fail "Can not pack the build results"
popd || fail

  # when we create .tgz.gz - TODO later
  if false ; then

  SOURCEDIST=`echo bitcoin-*.tar.gz`
  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`
  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar xf ../$SOURCEDIST
  find bitcoin-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST
  popd

  ORIGPATH="$PATH"
  # Extract the release tarball into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH=`pwd`/installed/${DISTNAME}
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf ../$SOURCEDIST

    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS="${HOST_CFLAGS}" CXXFLAGS="${HOST_CXXFLAGS}" LDFLAGS="${HOST_LDFLAGS}"
    make ${MAKEOPTS}
    make ${MAKEOPTS} -C src check-security

    #TODO: This is a quick hack that disables symbol checking for arm.
    #      Instead, we should investigate why these are popping up.
    #      For aarch64, we'll need to bump up the min GLIBC version, as the abi
    #      support wasn't introduced until 2.17.
    case $i in
       aarch64-*) : ;;
       arm-*) : ;;
       *) make ${MAKEOPTS} -C src check-symbols ;;
    esac

    make install DESTDIR=${INSTALLPATH}
    cd installed
    find . -name "lib*.la" -delete
    find . -name "lib*.a" -delete
    rm -rf ${DISTNAME}/lib/pkgconfig
    find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
    find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
    find ${DISTNAME} -not -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz
    find ${DISTNAME} -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz
    cd ../../
    rm -rf distsrc-${i}
  done
  mkdir -p $OUTDIR/s	rc
  mv $SOURCEDIST $OUTDIR/src

  fi # fixing up the out package

  ### </LICENCE> - end of licence block

  echo "Entire script in Gitian done"
  date

