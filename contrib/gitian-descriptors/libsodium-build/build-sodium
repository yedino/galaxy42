#!/usr/bin/env bash

set -o errexit
set -o nounset

# Variables/functions below are set by parent script, uncomment if you want to use this script standalone
# Global variables: GALAXY_DIR, BUILD_DIR, WRAP_DIR, OUTDIR, option_allow_sodium and option_download_skip
# source "${HOME}/build/galaxy42/contrib/gitian-descriptors/gitian_global-variables"

# importing functions
#. "${GALAXY_DIR}/share/script/lib/fail.sh"

# As first argument of build-sodium TARGET_ARCH is required
# Depends on TARGET_ARCH SODIUM_BUILD_DIR is exported
function build-sodium () {
	local TARGET_ARCH="$1"
	local SODIUM_DIR="$BUILD_DIR/libsodium"

	# import function that download and verify libsodium
	. "${GALAXY_DIR}/contrib/gitian-descriptors/libsodium-build/dl-sodium"

	# use wrapped tools to provide deterministic build
	export PATH="${WRAP_DIR}:${PATH}"
	printf "build-sodium: PATH = $PATH"

	## clone and build libsodium
	printf "\n\n=========================================================================\n\n"
	printf "libsodium...\n\n"

	if (( option_allow_sodium )) ; then
		printf "\n\nWill build sodium now\n\n"

		if (( option_download_skip )) ; then
			printf "\n\n\n\nSkipping download (libsodium)\n\n\n\n"

		else
			# Download main libsodium repository
			dl_sodium
		fi

		pushd "${SODIUM_DIR}" || fail # cd

			./autogen.sh || fail

			printf "\n\nRunning crossbuild-script(s) (of lib sodium)\n\n"

			if [[ $TARGET_ARCH == "x86_64-w64-mingw32" ]]; then
				local patched_msys_script="$HOME/build/galaxy42/contrib/gitian-patch/msys2-win64.sh"
				printf "\n\nPatching the mingw-crossbuild-script(s) (of lib sodium 64bit) - from file ($patched_msys_script)\n\n"
				cp "$patched_msys_script" "./dist-build/msys2-win64.sh" || fail

				export CC="x86_64-w64-mingw32-gcc"
				export CXX="x86_64-w64-mingw32-g++"
				./dist-build/msys2-win64.sh || fail
				export readonly SODIUM_BUILD_DIR="${SODIUM_DIR}/libsodium-win64"

			elif [[ $TARGET_ARCH == "i686-w64-mingw32" ]]; then

				local patched_msys_script="${GALAXY_DIR}/contrib/gitian-patch/msys2-win32.sh"
				printf "\n\nPatching the mingw-crossbuild-script(s) (of lib sodium 32bit) - from file ($patched_msys_script)\n\n"
				cp "$patched_msys_script" "./dist-build/msys2-win32.sh" || fail

				export CC="i686-w64-mingw32-gcc"
				export CXX="i686-w64-mingw32-g++"
				./dist-build/msys2-win32.sh || fail
				export SODIUM_BUILD_DIR="${SODIUM_DIR}/libsodium-win32"

			elif [[ $TARGET_ARCH == "x86_64-apple-darwin15" ]]; then
				local patched_osx_script="${GALAXY_DIR}/contrib/gitian-patch/libsodium-osx_x86_64.sh"
				printf "\n\nPatching the apple-darwin15-crossbuild-script(s) (of lib sodium 64bit) - from file ($patched_osx_script)\n\n"
				cp "$patched_osx_script" "./dist-build/osx.sh" || fail

				export CC="x86_64-apple-darwin15-clang"
				export CXX="x86_64-apple-darwin15-clang++"
				./dist-build/osx.sh || fail

				export readonly SODIUM_BUILD_DIR="${SODIUM_DIR}/libsodium-osx"
				find "${SODIUM_BUILD_DIR}/lib/" -name "*.dylib" -exec cp -v {} "${OUTDIR}" \; || fail "cp error"
			fi
		popd

	else
		printf "\n\nSkipping sodium (as selected in options)\n\n"
	fi
}
