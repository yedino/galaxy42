#!/usr/bin/env bash

set -o errexit
set -o nounset

# Variables/Fuctions required in this script (some of them could be sourced from gitian_global-variables):
#--------------------------
# TARGET_ARCH
# BUILD_DIR
# WRAP_DIR
# BOOST_BUILD_DIR
#--------------------------
# option_download_skip
# option_allow_boost
# option_verbose
#--------------------------
# fail function
#--------------------------

# source global variables
source "${HOME}/build/galaxy42/contrib/gitian-descriptors/gitian_global-variables"

readonly BOOST_BUILD_THREADS=2
readonly BOOST_DIR="${BUILD_DIR}/boost"
readonly USER_CONFIG_FILE="${BUILD_DIR}/boost_${TARGET_ARCH}_user-config.jam"

# import functions for boost main and submodules download
. "${GALAXY_DIR}"/contrib/gitian-descriptors/libboost-build/dl-boost-submodules
. "${GALAXY_DIR}"/contrib/gitian-descriptors/libboost-build/dl-boost

# import fail function
. "${GALAXY_DIR}"/share/script/lib/fail.sh


b2_opt_with_lib=( "--with-filesystem" \
                  "--with-system" \
                  "--with-program_options" \
                  "--with-thread" \
                  "--with-locale" \
                  "--with-date_time" )

b2_opt_debug=( )
if (( option_verbose ))
then
	b2_opt_debug=( "-d" "4" "--debug-building" )
else
	b2_opt_debug=( "-d" "0" "--debug-building" )
fi


# Main download and build
if (( option_allow_boost ))
then
	printf "\n\nWill building boost in BOOST_DIR='${BOOST_DIR}', OUTPUT_DIR='${BOOST_BUILD_DIR}'\n\n"

	if (( option_download_skip ))
	then
		printf "\n\nSkipping download (boost)\n\n"

	else
		# Download main boost repository
		dl_boost
		pushd "${BOOST_DIR}" || fail "Can not enter boost build dir"
			# Download boost submodules in n=3 attempts
			dl_boost_submodules_n 3
		popd

		# Setting target depends optins
		if [ -v ${TARGET_ARCH+x} ]
		then
			echo "Require TARGET_ARCH variable not set, exiting/failing"
			fail
		else
			echo "Building boost libraries for TARGET='${TARGET_ARCH}'"

			echo "# This config was GENERATED (will be over-written) by $0." > "${USER_CONFIG_FILE}" || fail

			if [[ $TARGET_ARCH == "x86_64-w64-mingw32" || $TARGET_ARCH == "i686-w64-mingw32"]]
			then
				boost_user_gcc="${WRAP_DIR}/${TARGET_ARCH}-g++ ;"
				build_target_os="windows"
				# threadapi=win32 \ # is necessary?
				link_type="shared"
				echo "using gcc : 4.9.2 : ${boost_user_gcc}" >> "${USER_CONFIG_FILE}" || fail
			elif [[ $TARGET_ARCH == "x86_64-linux-gnu" ]]
			then
				boost_user_gcc="${WRAP_DIR}/g++ ;"
				build_target_os="linux"
				link_type="static"
				echo "using gcc : 5.4.0 : ${boost_user_gcc}" >> "${USER_CONFIG_FILE}" || fail
			fi
		fi
	fi

	pushd "${BOOST_DIR}" || fail "Can not enter boost build dir"

		# delete it to have a clean build (even if we keept downloaded PREVIOUSLY files)
		git clean -xdf || fail
		rm -rf "${BOOST_BUILD_DIR}" || fail
		mkdir "${BOOST_BUILD_DIR}" || fail

		# reset and claen boost submodules
		git submodule foreach git reset --hard HEAD
		git submodule foreach git clean -fdx

		printf "\n\nWill set boost user config to use compiler: (%s)\n" "$boost_user_gcc"
		printf "\n\nBoost build - main part (PWD=$PWD). ls:\n" ; ls ; printf "\n\n"

		printf "\n\nBoost bootstrap...\n\n"
		./bootstrap.sh --without-icu || fail
		printf "\n\nBoost bootstrap is done.\n\n"

		./b2 clean

		printf "\n\nBoost b2 headers...\n\n"
		./b2 -q headers || fail "b2 headers"

		printf "\n\nStarting the b2 boost build\n"
		set -x
		./b2 \
			-q -a\
			"${b2_opt_debug[@]}" \
			-j "${BOOST_BUILD_THREADS}" \
			--prefix="${BOOST_BUILD_DIR}" \
			--user-config="${USER_CONFIG_FILE}" \
			"${b2_opt_with_lib[@]}" \
			toolset=gcc \
			target-os="${build_target_os}" \
			--build-type=complete \
			variant=release \
			threading=multi \
			link="${link_type}" \
			runtime-link="${link_type}" \
			-sNO_BZIP2=1 --sNO_ZLIB=1 \
			--layout=tagged install \
				|| {
					set -x
					fail "The b2 build of boost failed"
				}
	set +x

		printf "\n\nDONE the b2 boost build\n\n"

	popd

else
	printf "\n\nSkipping boost (as selected in options)\n\n"
fi

