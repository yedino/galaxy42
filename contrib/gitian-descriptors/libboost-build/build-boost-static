#!/usr/bin/env bash

# importing functions for boost submodules download
. /home/ubuntu/build/galaxy42/contrib/gitian-descriptors/libboost-build/dl-boost-submodules
. /home/ubuntu/build/galaxy42/contrib/gitian-descriptors/libboost-build/dl-boost

function fail() {
    printf "\nERROR: the script failed (see above messages).\n\n"
	exit 1
}

## clone and build boost
printf "\n\n=========================================================================\n\n"
printf "boost...\n\n"
readonly BOOST_DIR="$HOME/build/boost/"

cd "$HOME/build/" || fail "Can not enter build dir"

option_download_skip=0  # XXXXXXXXXXXXXXXXX
option_allow_boost=1

if (( option_allow_boost )) ; then
    printf "\n\nWill build boost now\n\n"

	if (( option_download_skip )) ; then
		printf "\n\n\n\nSkipping download (boost)\n\n\n\n"

	else
		# Download main boost repository
		dl_boost

		# Download boost submodules in n=3 attempts
		dl_boost_submodules_n 3
	fi

pushd boost || fail # cd
pwd
ls

echo "Will build boost in PWD=$PWD"
# delete it to have a clean build (even if we keept downloaded PREVIOUSLY files)
git clean -xdf || fail
rm -rf static-build || fail
mkdir static-build || fail

boost_user_gcc="$HOME/wrapped/g++ ;"
#boost_user_gcc="g++;"
printf "\n\nWill set boost user config to use compiler: (%s)\n" "$boost_user_gcc"

printf "\n\nBoost build - main part (PWD=$PWD). ls:\n" ; ls ; printf "\n\n"
echo "# This config was GENERATED (will be over-written) by $0." > user-config.jam || fail
echo "using gcc : 5.4.0 : $boost_user_gcc" >> user-config.jam || fail

  printf "\nTEST TOOLS (in BOOST script):\n"
  set -x
  which gcc
  which ar
  which ranlib
  gcc -v || fail "test gcc"
  g++ -v || fail "test g++"
  ar --version || fail "test ar"
  ranlib --version || fail "test ranlib"
  g++ -print-prog-name=ar
  set +x
  printf "\n\n"

printf "\n\nBoost bootstrap...\n\n"
./bootstrap.sh --without-icu || fail
printf "\n\nBoost bootstrap is done.\n\n"
ls

printf "\n\nBoost b2 headers...\n\n"
./b2 -q headers || fail "b2 headers"

printf "\n\nStarting the b2 boost build\n\n"
b2_opt_with_lib=( "--with-filesystem" "--with-system" "--with-program_options" "--with-thread" "--with-locale" )
b2_opt_debug=( )
if (( option_verbose )) ; then
    b2_opt_debug=( "-d" "4" "--debug-building" )
fi

set -x
./b2 \
    -q \
    "${b2_opt_debug[@]}" \
    -a --user-config=user-config.jam toolset=gcc --build-type=complete variant=release \
     --prefix=/"$BOOST_DIR"/static-build threading=multi \
     link=static \
     "${b2_opt_with_lib[@]}" \
     runtime-link=static \
	 boost.locale.icu=off \
    -j 1 \
    -sNO_BZIP2=1 --sNO_ZLIB=1 \
    --layout=tagged install \
    || {
	set -x
	fail "The b2 build of boost failed"
	}
set +x

printf "\n\n\n\nDONE the b2 boost build\n\n\n\n"

# copy all boost includes for header only libraries
find ./libs -maxdepth 6 -type d -print0 | while IFS= read -rd '' D; do
    substr="include"
    if  test "${D#*$substr}" != "$D" # looking for include dir's
    then
        end_of=$(echo $D | tail -c 8) # 8 = len(include) + end string char
        #echo "$end_of"
        if [ $end_of = $substr ]
        then
            cp -r "$D" ./static-build || fail "Can not copy $D"
        fi
    fi
done

popd

printf "\n\nFixing up static library names. [TODO] why is this needed?!\n\n\n"
pushd /home/ubuntu/build/boost/static-build/lib/ || "Enter dir of boost static build, to fix it"
	for x in system filesystem locale program_options thread ; do ln -s  libboost_$x-mt-s.a  libboost_$x-mt-1_61.a ; done
popd

else
    printf "\n\nSkipping boost (as selected in options)\n\n"

fi
